
# TODO replace with PagoPa module.
resource "aws_security_group" "service_security_group" {
  vpc_id = module.vpc.vpc_id

  ingress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    security_groups = [aws_security_group.alb.id]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = merge({
    Name = format("%s-service-sg", local.project)
  }, var.tags)
}

resource "aws_security_group" "alb" {
  vpc_id = module.vpc.vpc_id

  ingress {
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  tags = merge({
    Name = format("%s-sg", local.project)
  }, var.tags)
}


module "alb" {
  source = "terraform-aws-modules/alb/aws"

  depends_on = [
    module.vpc,
  ]

  name = format("%s-alb", local.project)

  load_balancer_type = "application"

  vpc_id          = module.vpc.vpc_id
  subnets         = module.vpc.public_subnets
  security_groups = [aws_security_group.alb.id]

  /* TODO store ALB access logs into S3 bucket.
  access_logs = {
    bucket = format("%s-alb-logs", local.project)
  }
  */

  target_groups = [
    {
      name        = format("%s-alb-tg", local.project)
      port        = 80
      protocol    = "HTTP"
      target_type = "ip"
      vpc_id      = module.vpc.vpc_id

      health_check = {
        healthy_threshold   = "3"
        interval            = "300"
        protocol            = "HTTP"
        matcher             = "200"
        timeout             = "3"
        path                = "/v1/status"
        unhealthy_threshold = "2"
      }
    }
  ]

  /* TOOD 
  https_listeners = [
    {
      port               = 443
      protocol           = "HTTPS"
      certificate_arn    = "arn:aws:iam::123456789012:server-certificate/test_cert-123456789012"
      target_group_index = 0
    }
  ]
  */

  http_tcp_listeners = [
    {
      port               = 80
      protocol           = "HTTP"
      target_group_index = 0
      default_action = {
        type = "forward"
      }
    }
  ]

  tags = var.tags
}
